rm(sena18_voto_prov)
# Se ordena y se le cambia nombre de variables
sena_18 <- sena_18 %>%
select(Provincia, Voto, total.y, total.x) %>%
rename(Total_Voto = total.y, Total_Dip = total.x)
# % del tipo de voto por total de dip como tipo de objeto numerico y texto
sena_18 <- sena_18 %>%
mutate(Porcentaje = round(Total_Voto*100/Total_Dip, 2),
Porcentaje_Texto = paste0(Porcentaje, "%"))
# Se unifica con la información geo
sena18_geo <- prov_geo %>% left_join(sena_18)
colnames(sena18_geo)
rm(sena_18) #Se elimina base anterior
# Se ordenan por máximo según el tipo de voto
sena18_map <- sena18_geo %>%
group_by(Provincia) %>%
mutate(Max = max(Porcentaje)) %>%
filter(Porcentaje == Max)
rm(sena18_geo) #Se elimina base anterior
# Mapa con escala de colores
sena18_map_color <- sena18_map %>%
mutate(Porcentaje = ifelse(Voto == "NEGATIVO", Porcentaje*-1, Porcentaje))
rm(sena18_map) #Se elimina base anterior
# Primera capa del mapa: colores
mypalette1s <- colorNumeric(c("#EA7B77", "#CAC795", "#8DB994"), domain=sena18_map_color$Porcentaje, na.color="transparent")
mypalette1s(c(1,6,9))
# Segunda capa del mapa: etiquetas
mytext1s <- paste(
"Provincia: ", sena18_map_color$Provincia,"<br/>",
"Voto: ", sena18_map_color$Voto, "<br/>",
"Porcentaje: ", sena18_map_color$Porcentaje_Texto, "<br/>",
"Total de Votos: ", sena18_map_color$Total_Dip, "<br/>",
sep="") %>%
lapply(htmltools::HTML)
# Tercera capa del mapa: interactividad
leaflet(sena18_map_color) %>%
addTiles()  %>%
setView(lat=-39, lng=-60, zoom=3.49) %>%
addPolygons(
fillColor = ~mypalette1s(Porcentaje),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.4,
label = mytext1s,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto")) %>%
addLegend("bottomright",
colors =c("#EA7B77","#8DB994"),
labels= c("NEGATIVO", "AFIRMATIVO"),
title= "Voto",
opacity = 0.9)
# 3.2) Mapa senadorxs 2020 ----
sena_2020 <- r_ive %>%
filter(Anio == 2020, Camara == "Senadorxs")
# Variables de interés
sena_2020 <- sena_2020 %>%
select(Camara, Provincia, Voto)
# Número total por tipo de voto y su %
sena2020_voto <- sena_2020 %>%
group_by(Voto) %>%
summarise(total = n()) %>%
mutate(Porcentaje = paste0(round((total*100/256),2),"%"))
# Número total de dip por provincia
sena20_provincia <- sena_2020 %>%
group_by(Provincia) %>%
summarise(total =n())
# Cantidad por tipo de voto y provincia
sena20_voto_prov <- sena_2020 %>%
group_by(Provincia, Voto) %>%
summarise(total = n())
# Número total de dip y tipo de voto por provincia
sena_20 <- merge(sena20_provincia, sena20_voto_prov, by = "Provincia")
#Se eliminan bases anteriores
rm(sena_2020)
rm(sena2020_voto)
rm(sena20_provincia)
rm(sena20_voto_prov)
# Se ordena y se le cambia nombre de variables
sena_20 <- sena_20 %>%
select(Provincia, Voto, total.y, total.x) %>%
rename(Total_Voto = total.y, Total_Dip = total.x)
# % del tipo de voto por total de dip como tipo de objeto numerico y texto
sena_20 <- sena_20 %>%
mutate(Porcentaje = round(Total_Voto*100/Total_Dip, 2),
Porcentaje_Texto = paste0(Porcentaje, "%"))
# Se unifica con la información geo
sena20_geo <- prov_geo %>% left_join(sena_20)
colnames(sena20_geo)
rm(sena_20) #Se elimina base anterior
# Se ordenan por máximo según el tipo de voto
sena20_map <- sena20_geo %>%
group_by(Provincia) %>%
mutate(Max = max(Porcentaje)) %>%
filter(Porcentaje == Max)
rm(sena20_geo) #Se elimina base anterior
# Mapa con escala de colores
sena20_map_color <- sena20_map %>%
mutate(Porcentaje = ifelse(Voto == "NEGATIVO", Porcentaje*-1, Porcentaje))
rm(sena20_map) #Se elimina base anterior
# Primera capa del mapa: colores
mypalette2s <- colorNumeric(c("#EA7B77", "#CAC795", "#8DB994"), domain=sena20_map_color$Porcentaje, na.color="transparent")
mypalette2s(c(1,6,9))
# Segunda capa del mapa: etiquetas
mytext2s <- paste(
"Provincia: ", sena20_map_color$Provincia,"<br/>",
"Voto: ", sena20_map_color$Voto, "<br/>",
"Porcentaje: ", sena20_map_color$Porcentaje_Texto, "<br/>",
"Total de Votos: ", sena20_map_color$Total_Dip, "<br/>",
sep="") %>%
lapply(htmltools::HTML)
# Tercera capa del mapa: interactividad
leaflet(sena20_map_color) %>%
addTiles()  %>%
setView(lat=-39, lng=-60, zoom=3.49) %>%
addPolygons(
fillColor = ~mypalette2s(Porcentaje),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.4,
label = mytext2s,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto")) %>%
addLegend("bottomright",
colors =c("#EA7B77","#8DB994"),
labels= c("NEGATIVO", "AFIRMATIVO"),
title= "Voto",
opacity = 0.9)
# Mapas de la Argetina ----
# conforme a la votación de la Ley IVE de Diputadxs y Senadorxs 2018 y 2020
# Paquetes
# installed.packages("beepr")
# installed.packages("sf")
# installed.packages("tidyverse")
# installed.packages("ggmap")
# installed.packages("leaflet")
# installed.packages("RColorBrewer")
# Librerias
library(beepr) # Avisa cuando acaba de correr el script
library(sf)
library(tidyverse)
options(dplyr.summarise.inform = FALSE) #para quitar problemas con los group_by
library(ggmap)
library(leaflet)
library(RColorBrewer)
# 1) Datas ----
# 1.1) Resultados Ley IVE ----
r_ive <- read.csv("C:/Users/socan/Documents/EANT/Social_Data_Analitcys/Proyecto_final/resultados_ive.csv", sep = ",", encoding = "latin1") #Para leer los acentos
# 1.2) Datos geo de provincia ----
provincias <- st_read("https://github.com/idera/Polymaps-Argentina/raw/master/provincias.json")
# Había dos Entre Ríos en la posición 15 y 18
provincias <- provincias[-c(18),]
# Seleccionamos las variables de interes
prov_geo <- provincias %>%
select(provincia, geometry)
colnames(prov_geo)[1] <- "Provincia" # se cambia el nombre de la 1ra variable
rm(provincias) # se borra base que ya no se va a usar
# Se cambia el nombre de las provincias
prov_geo <- prov_geo %>%
mutate(Provincia = case_when(
Provincia == "Tierra del Fuego" ~ "TIERRA DEL FUEGO",
Provincia == "Formosa" ~ "FORMOSA",
Provincia == "Santiago del Estero" ~ "SANTIAGO DEL ESTERO",
Provincia == "Corrientes" ~ "CORRIENTES",
Provincia == "San Juan" ~ "SAN JUAN",
Provincia == "San Luis" ~ "SAN LUIS",
Provincia == "Capital Federal" ~ "C.A.B.A.",
Provincia == "Rio Negro" ~ "RIO NEGRO",
Provincia == "Jujuy" ~ "JUJUY",
Provincia == "Chaco" ~ "CHACO",
Provincia == "Misiones" ~ "MISIONES",
Provincia == "La Rioja" ~ "LA RIOJA",
Provincia == "Cordoba" ~ "CÓRDOBA",
Provincia == "Mendoza" ~ "MENDOZA",
Provincia == "La Pampa" ~ "LA PAMPA",
Provincia == "Chubut" ~ "CHUBUT",
Provincia == "Salta" ~ "SALTA",
Provincia == "Catamarca" ~ "CATAMARCA",
Provincia == "Tucuman" ~ "TUCUMÁN",
Provincia == "Santa Fe" ~ "SANTA FE",
Provincia == "Entre Rios" ~ "ENTRE RÍOS",
Provincia == "Buenos Aires" ~ "BUENOS AIRES",
Provincia == "Neuquen" ~ "NEUQUÉN",
Provincia == "Santa Cruz" ~ "SANTA CRUZ"))
resultados_iva_geo <- prov_geo %>% left_join(r_ive)
# 2) Mapas Diputadxs ----
# 2.1) Mapa diputadxs 2018 ----
dip_2018 <- r_ive %>%
filter(Anio == 2018, Camara == "Diputadxs")
# Variables de interés
dip_2018 <- dip_2018 %>%
select(Camara, Provincia, Voto)
# Número total por tipo de voto y su %
dip2018_voto <- dip_2018 %>%
group_by(Voto) %>%
summarise(total = n()) %>%
mutate(Porcentaje = paste0(round((total*100/256),2),"%"))
# Número total de dip por provincia
dip18_provincia <- dip_2018 %>%
group_by(Provincia) %>%
summarise(total =n())
# Cantidad por tipo de voto y provincia
dip18_voto_prov <- dip_2018 %>%
group_by(Provincia, Voto) %>%
summarise(total = n())
# Número total de dip y tipo de voto por provincia
dip_18 <- merge(dip18_provincia, dip18_voto_prov, by = "Provincia")
#Se eliminan bases anteriores
rm(dip_2018)
rm(dip2018_voto)
rm(dip18_provincia)
rm(dip18_voto_prov)
# Se ordena y se le cambia nombre de variables
dip_18 <- dip_18 %>%
select(Provincia, Voto, total.y, total.x) %>%
rename(Total_Voto = total.y, Total_Dip = total.x)
# % del tipo de voto por total de dip como tipo de objeto numerico y texto
dip_18 <- dip_18 %>%
mutate(Porcentaje = round(Total_Voto*100/Total_Dip, 2),
Porcentaje_Texto = paste0(Porcentaje, "%"))
# Se unifica con la información geo
dip18_geo <- prov_geo %>% left_join(dip_18)
colnames(dip18_geo)
rm(dip_18) #Se elimina base anterior
# Se ordenan por máximo según el tipo de voto
dip18_map <- dip18_geo %>%
group_by(Provincia) %>%
mutate(Max = max(Porcentaje)) %>%
filter(Porcentaje == Max)
rm(dip18_geo) #Se elimina base anterior
# Mapa con escala de colores
dip18_map_color <- dip18_map %>%
mutate(Porcentaje = ifelse(Voto == "NEGATIVO", Porcentaje*-1, Porcentaje))
rm(dip18_map) #Se elimina base anterior
# Primera capa del mapa: vectores de color
mypalette1d <- colorNumeric(c("#EA7B77", "#CAC795", "#8DB994"), domain=dip18_map_color$Porcentaje, na.color="transparent")
mypalette1d(c(1,6,9))
# Segunda capa del mapa: etiquetas.
mytext1d <- paste(
"Provincia: ", dip18_map_color$Provincia,"<br/>",
"Voto: ", dip18_map_color$Voto, "<br/>",
"Porcentaje: ", dip18_map_color$Porcentaje_Texto, "<br/>",
"Total de Votos: ", dip18_map_color$Total_Dip, "<br/>", sep="") %>%
lapply(htmltools::HTML)
# Tercera capa del mapa: interactividad
leaflet(dip18_map_color) %>%
addTiles()  %>%
setView(lat=-39, lng=-60, zoom=3.49) %>%
addPolygons(
fillColor = ~mypalette1d(Porcentaje),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.4,
label = mytext1d,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto")) %>%
addLegend("bottomright",
colors =c("#EA7B77","#8DB994"),
labels= c("NEGATIVO", "AFIRMATIVO"),
title= "Voto",
opacity = 0.9)
# 2.2) Mapa diputadxs 2020 ----
dip_2020 <- r_ive %>%
filter(Anio == 2020, Camara == "Diputadxs")
# Variables de interés
dip_2020 <- dip_2020 %>%
select(Camara, Provincia, Voto)
# Número total por tipo de voto y su %
dip2020_voto <- dip_2020 %>%
group_by(Voto) %>%
summarise(total = n()) %>%
mutate(Porcentaje = paste0(round((total*100/256),2),"%"))
# Número total de dip por provincia
dip20_provincia <- dip_2020 %>%
group_by(Provincia) %>%
summarise(total =n())
# Cantidad por tipo de voto y provincia
dip20_voto_prov <- dip_2020 %>%
group_by(Provincia, Voto) %>%
summarise(total = n())
# Número total de dip y tipo de voto por provincia
dip_20 <- merge(dip20_provincia, dip20_voto_prov, by = "Provincia")
#Se eliminan bases anteriores
rm(dip_2020)
rm(dip2020_voto)
rm(dip20_provincia)
rm(dip20_voto_prov)
# Se ordena y se le cambia nombre de variables
dip_20 <- dip_20 %>%
select(Provincia, Voto, total.y, total.x) %>%
rename(Total_Voto = total.y, Total_Dip = total.x)
# % del tipo de voto por total de dip como tipo de objeto numerico y texto
dip_20 <- dip_20 %>%
mutate(Porcentaje = round(Total_Voto*100/Total_Dip, 2),
Porcentaje_Texto = paste0(Porcentaje, "%"))
# Se unifica con la información geo
dip20_geo <- prov_geo %>% left_join(dip_20)
colnames(dip20_geo)
rm(dip_20) #Se elimina base anterior
# Se ordenan por máximo según el tipo de voto
dip20_map <- dip20_geo %>%
group_by(Provincia) %>%
mutate(Max = max(Porcentaje)) %>%
filter(Porcentaje == Max)
rm(dip20_geo) #Se elimina base anterior
# Mapa para escala de colores
dip20_map_color <- dip20_map %>%
mutate(Porcentaje = ifelse(Voto == "NEGATIVO", Porcentaje*-1, Porcentaje))
rm(dip20_map) #Se elimina base anterior
# Primera capa del mapa: colores
mypalette2d <- colorNumeric(c("#EA7B77", "#CAC795", "#8DB994"), domain=dip20_map_color$Porcentaje, na.color="transparent")
mypalette2d(c(1,6,9))
# Segunda capa del mapa: etiquetas.
mytext2d <- paste(
"Provincia: ", dip20_map_color$Provincia,"<br/>",
"Voto: ", dip20_map_color$Voto, "<br/>",
"Porcentaje: ", dip20_map_color$Porcentaje_Texto, "<br/>",
"Total de Votos: ", dip20_map_color$Total_Dip, "<br/>",
sep="") %>%
lapply(htmltools::HTML)
# Tercera capa del mapa: interactividad
leaflet(dip20_map_color) %>%
addTiles()  %>%
setView(lat=-39, lng=-60, zoom=3.49) %>%
addPolygons(
fillColor = ~mypalette2d(Porcentaje),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.4,
label = mytext2d,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto")) %>%
addLegend("bottomright",
colors =c("#EA7B77","#8DB994"),
labels= c("NEGATIVO", "AFIRMATIVO"),
title= "Voto",
opacity = 0.9)
# 3) Mapas Senadorxs ----
# 3.1) Mapa senadorxs 2018 ----
sena_2018 <- r_ive %>%
filter(Anio == 2018, Camara == "Senadorxs")
# Variables de interés
sena_2018 <- sena_2018 %>%
select(Camara, Provincia, Voto)
# Número total por tipo de voto y su %
sena2018_voto <- sena_2018 %>%
group_by(Voto) %>%
summarise(total = n()) %>%
mutate(Porcentaje = paste0(round((total*100/256),2),"%"))
# Número total de dip por provincia
sena18_provincia <- sena_2018 %>%
group_by(Provincia) %>%
summarise(total =n())
# Cantidad por tipo de voto y provincia
sena18_voto_prov <- sena_2018 %>%
group_by(Provincia, Voto) %>%
summarise(total = n())
# Número total de dip y tipo de voto por provincia
sena_18 <- merge(sena18_provincia, sena18_voto_prov, by = "Provincia")
#Se eliminan bases anteriores
rm(sena_2018)
rm(sena2018_voto)
rm(sena18_provincia)
rm(sena18_voto_prov)
# Se ordena y se le cambia nombre de variables
sena_18 <- sena_18 %>%
select(Provincia, Voto, total.y, total.x) %>%
rename(Total_Voto = total.y, Total_Dip = total.x)
# % del tipo de voto por total de dip como tipo de objeto numerico y texto
sena_18 <- sena_18 %>%
mutate(Porcentaje = round(Total_Voto*100/Total_Dip, 2),
Porcentaje_Texto = paste0(Porcentaje, "%"))
# Se unifica con la información geo
sena18_geo <- prov_geo %>% left_join(sena_18)
colnames(sena18_geo)
rm(sena_18) #Se elimina base anterior
# Se ordenan por máximo según el tipo de voto
sena18_map <- sena18_geo %>%
group_by(Provincia) %>%
mutate(Max = max(Porcentaje)) %>%
filter(Porcentaje == Max)
rm(sena18_geo) #Se elimina base anterior
# Mapa con escala de colores
sena18_map_color <- sena18_map %>%
mutate(Porcentaje = ifelse(Voto == "NEGATIVO", Porcentaje*-1, Porcentaje))
rm(sena18_map) #Se elimina base anterior
# Primera capa del mapa: colores
mypalette1s <- colorNumeric(c("#EA7B77", "#CAC795", "#8DB994"), domain=sena18_map_color$Porcentaje, na.color="transparent")
mypalette1s(c(1,6,9))
# Segunda capa del mapa: etiquetas
mytext1s <- paste(
"Provincia: ", sena18_map_color$Provincia,"<br/>",
"Voto: ", sena18_map_color$Voto, "<br/>",
"Porcentaje: ", sena18_map_color$Porcentaje_Texto, "<br/>",
"Total de Votos: ", sena18_map_color$Total_Dip, "<br/>",
sep="") %>%
lapply(htmltools::HTML)
# Tercera capa del mapa: interactividad
leaflet(sena18_map_color) %>%
addTiles()  %>%
setView(lat=-39, lng=-60, zoom=3.49) %>%
addPolygons(
fillColor = ~mypalette1s(Porcentaje),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.4,
label = mytext1s,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto")) %>%
addLegend("bottomright",
colors =c("#EA7B77","#8DB994"),
labels= c("NEGATIVO", "AFIRMATIVO"),
title= "Voto",
opacity = 0.9)
# 3.2) Mapa senadorxs 2020 ----
sena_2020 <- r_ive %>%
filter(Anio == 2020, Camara == "Senadorxs")
# Variables de interés
sena_2020 <- sena_2020 %>%
select(Camara, Provincia, Voto)
# Número total por tipo de voto y su %
sena2020_voto <- sena_2020 %>%
group_by(Voto) %>%
summarise(total = n()) %>%
mutate(Porcentaje = paste0(round((total*100/256),2),"%"))
# Número total de dip por provincia
sena20_provincia <- sena_2020 %>%
group_by(Provincia) %>%
summarise(total =n())
# Cantidad por tipo de voto y provincia
sena20_voto_prov <- sena_2020 %>%
group_by(Provincia, Voto) %>%
summarise(total = n())
# Número total de dip y tipo de voto por provincia
sena_20 <- merge(sena20_provincia, sena20_voto_prov, by = "Provincia")
#Se eliminan bases anteriores
rm(sena_2020)
rm(sena2020_voto)
rm(sena20_provincia)
rm(sena20_voto_prov)
# Se ordena y se le cambia nombre de variables
sena_20 <- sena_20 %>%
select(Provincia, Voto, total.y, total.x) %>%
rename(Total_Voto = total.y, Total_Dip = total.x)
# % del tipo de voto por total de dip como tipo de objeto numerico y texto
sena_20 <- sena_20 %>%
mutate(Porcentaje = round(Total_Voto*100/Total_Dip, 2),
Porcentaje_Texto = paste0(Porcentaje, "%"))
# Se unifica con la información geo
sena20_geo <- prov_geo %>% left_join(sena_20)
colnames(sena20_geo)
rm(sena_20) #Se elimina base anterior
# Se ordenan por máximo según el tipo de voto
sena20_map <- sena20_geo %>%
group_by(Provincia) %>%
mutate(Max = max(Porcentaje)) %>%
filter(Porcentaje == Max)
rm(sena20_geo) #Se elimina base anterior
# Mapa con escala de colores
sena20_map_color <- sena20_map %>%
mutate(Porcentaje = ifelse(Voto == "NEGATIVO", Porcentaje*-1, Porcentaje))
rm(sena20_map) #Se elimina base anterior
# Primera capa del mapa: colores
mypalette2s <- colorNumeric(c("#EA7B77", "#CAC795", "#8DB994"), domain=sena20_map_color$Porcentaje, na.color="transparent")
mypalette2s(c(1,6,9))
# Segunda capa del mapa: etiquetas
mytext2s <- paste(
"Provincia: ", sena20_map_color$Provincia,"<br/>",
"Voto: ", sena20_map_color$Voto, "<br/>",
"Porcentaje: ", sena20_map_color$Porcentaje_Texto, "<br/>",
"Total de Votos: ", sena20_map_color$Total_Dip, "<br/>",
sep="") %>%
lapply(htmltools::HTML)
# Tercera capa del mapa: interactividad
leaflet(sena20_map_color) %>%
addTiles()  %>%
setView(lat=-39, lng=-60, zoom=3.49) %>%
addPolygons(
fillColor = ~mypalette2s(Porcentaje),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.4,
label = mytext2s,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto")) %>%
addLegend("bottomright",
colors =c("#EA7B77","#8DB994"),
labels= c("NEGATIVO", "AFIRMATIVO"),
title= "Voto",
opacity = 0.9)
sena20_map_color
View(sena20_map_color)
library(shiny); runApp('Shiny_IVE.R')
library(shiny); runApp('Shiny_IVE.R')
library(shiny); runApp('Shiny_IVE.R')
